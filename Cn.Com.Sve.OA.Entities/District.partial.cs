//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Cn.Com.Sve.OA.Entities
{
    public partial class District
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual int CityId
        {
            get { return _cityId; }
            set
            {
                if (_cityId != value)
                {
                    if (City != null && City.Id != value)
                    {
                        City = null;
                    }
                    _cityId = value;
                }
            }
        }
        private int _cityId;
    
        public virtual string PhonePrefix
        {
            get;
            set;
        }
    
        public virtual string Postcode
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual City City
        {
            get { return _city; }
            set
            {
                if (!ReferenceEquals(_city, value))
                {
                    var previousValue = _city;
                    _city = value;
                    FixupCity(previousValue);
                }
            }
        }
        private City _city;
    
        public virtual ICollection<School> Schools
        {
            get
            {
                if (_schools == null)
                {
                    var newCollection = new FixupCollection<School>();
                    newCollection.CollectionChanged += FixupSchools;
                    _schools = newCollection;
                }
                return _schools;
            }
            set
            {
                if (!ReferenceEquals(_schools, value))
                {
                    var previousValue = _schools as FixupCollection<School>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSchools;
                    }
                    _schools = value;
                    var newValue = value as FixupCollection<School>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSchools;
                    }
                }
            }
        }
        private ICollection<School> _schools;
    
        public virtual ICollection<Customer> Customers
        {
            get
            {
                if (_customers == null)
                {
                    var newCollection = new FixupCollection<Customer>();
                    newCollection.CollectionChanged += FixupCustomers;
                    _customers = newCollection;
                }
                return _customers;
            }
            set
            {
                if (!ReferenceEquals(_customers, value))
                {
                    var previousValue = _customers as FixupCollection<Customer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomers;
                    }
                    _customers = value;
                    var newValue = value as FixupCollection<Customer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomers;
                    }
                }
            }
        }
        private ICollection<Customer> _customers;
    
        public virtual ICollection<Student> Student_File
        {
            get
            {
                if (_student_File == null)
                {
                    var newCollection = new FixupCollection<Student>();
                    newCollection.CollectionChanged += FixupStudent_File;
                    _student_File = newCollection;
                }
                return _student_File;
            }
            set
            {
                if (!ReferenceEquals(_student_File, value))
                {
                    var previousValue = _student_File as FixupCollection<Student>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStudent_File;
                    }
                    _student_File = value;
                    var newValue = value as FixupCollection<Student>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStudent_File;
                    }
                }
            }
        }
        private ICollection<Student> _student_File;

        #endregion

        #region Association Fixup
    
        private void FixupCity(City previousValue)
        {
            if (previousValue != null && previousValue.Districts.Contains(this))
            {
                previousValue.Districts.Remove(this);
            }
    
            if (City != null)
            {
                if (!City.Districts.Contains(this))
                {
                    City.Districts.Add(this);
                }
                if (CityId != City.Id)
                {
                    CityId = City.Id;
                }
            }
        }
    
        private void FixupSchools(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (School item in e.NewItems)
                {
                    item.District = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (School item in e.OldItems)
                {
                    if (ReferenceEquals(item.District, this))
                    {
                        item.District = null;
                    }
                }
            }
        }
    
        private void FixupCustomers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Customer item in e.NewItems)
                {
                    item.District = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Customer item in e.OldItems)
                {
                    if (ReferenceEquals(item.District, this))
                    {
                        item.District = null;
                    }
                }
            }
        }
    
        private void FixupStudent_File(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Student item in e.NewItems)
                {
                    item.District = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Student item in e.OldItems)
                {
                    if (ReferenceEquals(item.District, this))
                    {
                        item.District = null;
                    }
                }
            }
        }

        #endregion

    }
}
