<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#>
<#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\..\Cn.Com.Sve.OA.DataServices\OaModel.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

// Write out support code to primary template output file
WriteHeader(fileManager);
BeginNamespace(namespaceName, code);
//WriteCustomObservableCollection();
EndNamespace(namespaceName);
EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();

// Emit Entity Types
// 循环处理实体模型中的所有实体
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
	string className = entity.Name + "Criteria";

    fileManager.StartNewFile(className + ".partial.cs");
    BeginNamespace(namespaceName, code);
	var pkTypeName = code.Escape(entity.KeyMembers[0].TypeUsage);
    bool entityHasNullableFKs = entity.NavigationProperties.Any(np => np.GetDependentProperties().Any(p=>ef.IsNullable(p)));
	string entitySetName = GetEntitySetName(entity.Name, container, code);
#>
public partial class <#=className#> {
	
	public int? page{ get; set; }
	public int? pagesize{ get; set; }
	public string sortname{ get; set; }
	public string sortorder{ get; set; }
	
<#	
	//region.End();
	
	foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
		string propertyName = code.Escape(edmProperty);
		string paraName = code.CamelCase(edmProperty.Name);
		bool isForeignKey = entity.NavigationProperties.Any(np=>np.GetDependentProperties().Contains(edmProperty));
		//if(!code.Escape(edmProperty).Equals("Id")){
#>
	public <#=this.ConvertToNullabse(code.Escape(edmProperty.TypeUsage))#> <#=propertyName#>Srh { get; set;}
<#
		//}
		if(this.BuildRange(code.Escape(edmProperty.TypeUsage))){
#>
	public <#=this.ConvertToNullabse(code.Escape(edmProperty.TypeUsage))#> <#=propertyName#>FromSrh { get; set;}
	public <#=this.ConvertToNullabse(code.Escape(edmProperty.TypeUsage))#> <#=propertyName#>ToSrh { get; set;}
<#
		}
	}
#>
}
<#
	EndNamespace(namespaceName);
}
	fileManager.Process();
#>

<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Cn.Com.Sve.OA.Entities;
<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    fileManager.EndBlock();
}
#>

<#+
// 写命名空间的开头 - 开始
void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#> {
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}
// 写命名空间的开头 - 结束
#>
<#+
void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}
#>

<#+
string GetEntitySetName(string entityName, EntityContainer container, CodeGenerationTools code){
	foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>()) {
		if(entitySet.ElementType.Name.Equals(entityName)){
			return code.Escape(entitySet.Name);
		}
	}
	return null;
}

bool BuildRange(string type){
	bool result = false;
	switch(type.ToLower()){
		case "int":
		case "decimal":
		case "double":
		case "long":
		case "datetime":
		case "system.datetime":
		case "nullable<int>":
		case "nullable<decimal>":
		case "nullable<double>":
		case "nullable<long>":
		case "nullable<datetime>":
		case "nullable<system.datetime>":
			result = true;
			break;
		default:
			break;
	}
	return result;
}

string ConvertToNullabse(string type){
	string result = type;
	switch(type.ToLower()){
		case "int":
		case "decimal":
		case "double":
		case "long":
		case "datetime":
		case "system.datetime":
		case "bool":
		case "boolean":
			result = type + "?";
			break;
		default:
			break;
	}
	return result;
}
#>
