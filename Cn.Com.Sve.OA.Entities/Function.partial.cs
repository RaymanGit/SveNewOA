//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Cn.Com.Sve.OA.Entities
{
    public partial class Function
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual int ModuleId
        {
            get { return _moduleId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_moduleId != value)
                    {
                        if (Module != null && Module.Id != value)
                        {
                            Module = null;
                        }
                        _moduleId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _moduleId;
    
        public virtual string Code
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Icon
        {
            get;
            set;
        }
    
        public virtual string Url
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ParentFunctionId
        {
            get { return _parentFunctionId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_parentFunctionId != value)
                    {
                        if (ParentFunction != null && ParentFunction.Id != value)
                        {
                            ParentFunction = null;
                        }
                        _parentFunctionId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _parentFunctionId;
    
        public virtual Nullable<int> Seq
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Function> SubFunctions
        {
            get
            {
                if (_subFunctions == null)
                {
                    var newCollection = new FixupCollection<Function>();
                    newCollection.CollectionChanged += FixupSubFunctions;
                    _subFunctions = newCollection;
                }
                return _subFunctions;
            }
            set
            {
                if (!ReferenceEquals(_subFunctions, value))
                {
                    var previousValue = _subFunctions as FixupCollection<Function>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSubFunctions;
                    }
                    _subFunctions = value;
                    var newValue = value as FixupCollection<Function>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSubFunctions;
                    }
                }
            }
        }
        private ICollection<Function> _subFunctions;
    
        public virtual Function ParentFunction
        {
            get { return _parentFunction; }
            set
            {
                if (!ReferenceEquals(_parentFunction, value))
                {
                    var previousValue = _parentFunction;
                    _parentFunction = value;
                    FixupParentFunction(previousValue);
                }
            }
        }
        private Function _parentFunction;
    
        public virtual Module Module
        {
            get { return _module; }
            set
            {
                if (!ReferenceEquals(_module, value))
                {
                    var previousValue = _module;
                    _module = value;
                    FixupModule(previousValue);
                }
            }
        }
        private Module _module;
    
        public virtual ICollection<UserGroupFunctionPermission> UserGroupFunctionPermissions
        {
            get
            {
                if (_userGroupFunctionPermissions == null)
                {
                    var newCollection = new FixupCollection<UserGroupFunctionPermission>();
                    newCollection.CollectionChanged += FixupUserGroupFunctionPermissions;
                    _userGroupFunctionPermissions = newCollection;
                }
                return _userGroupFunctionPermissions;
            }
            set
            {
                if (!ReferenceEquals(_userGroupFunctionPermissions, value))
                {
                    var previousValue = _userGroupFunctionPermissions as FixupCollection<UserGroupFunctionPermission>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserGroupFunctionPermissions;
                    }
                    _userGroupFunctionPermissions = value;
                    var newValue = value as FixupCollection<UserGroupFunctionPermission>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserGroupFunctionPermissions;
                    }
                }
            }
        }
        private ICollection<UserGroupFunctionPermission> _userGroupFunctionPermissions;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupParentFunction(Function previousValue)
        {
            if (previousValue != null && previousValue.SubFunctions.Contains(this))
            {
                previousValue.SubFunctions.Remove(this);
            }
    
            if (ParentFunction != null)
            {
                if (!ParentFunction.SubFunctions.Contains(this))
                {
                    ParentFunction.SubFunctions.Add(this);
                }
                if (ParentFunctionId != ParentFunction.Id)
                {
                    ParentFunctionId = ParentFunction.Id;
                }
            }
            else if (!_settingFK)
            {
                ParentFunctionId = null;
            }
        }
    
        private void FixupModule(Module previousValue)
        {
            if (previousValue != null && previousValue.Functions.Contains(this))
            {
                previousValue.Functions.Remove(this);
            }
    
            if (Module != null)
            {
                if (!Module.Functions.Contains(this))
                {
                    Module.Functions.Add(this);
                }
                if (ModuleId != Module.Id)
                {
                    ModuleId = Module.Id;
                }
            }
        }
    
        private void FixupSubFunctions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Function item in e.NewItems)
                {
                    item.ParentFunction = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Function item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentFunction, this))
                    {
                        item.ParentFunction = null;
                    }
                }
            }
        }
    
        private void FixupUserGroupFunctionPermissions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserGroupFunctionPermission item in e.NewItems)
                {
                    item.Function = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserGroupFunctionPermission item in e.OldItems)
                {
                    if (ReferenceEquals(item.Function, this))
                    {
                        item.Function = null;
                    }
                }
            }
        }

        #endregion

    }
}
