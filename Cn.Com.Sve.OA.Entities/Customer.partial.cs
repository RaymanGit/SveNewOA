//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Cn.Com.Sve.OA.Entities
{
    public partial class Customer
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual Nullable<int> SchoolId
        {
            get { return _schoolId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_schoolId != value)
                    {
                        if (School != null && School.Id != value)
                        {
                            School = null;
                        }
                        _schoolId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _schoolId;
    
        public virtual int MarketYear
        {
            get;
            set;
        }
    
        public virtual string Telephone
        {
            get;
            set;
        }
    
        public virtual string Mobile
        {
            get;
            set;
        }
    
        public virtual string Gender
        {
            get;
            set;
        }
    
        public virtual string QQ
        {
            get;
            set;
        }
    
        public virtual string Email
        {
            get;
            set;
        }
    
        public virtual string EduLevel
        {
            get;
            set;
        }
    
        public virtual bool IsGaoKao
        {
            get;
            set;
        }
    
        public virtual Nullable<int> GaoKaoScore
        {
            get;
            set;
        }
    
        public virtual string GaoKaoBatch
        {
            get;
            set;
        }
    
        public virtual Nullable<int> DistrictId
        {
            get { return _districtId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_districtId != value)
                    {
                        if (District != null && District.Id != value)
                        {
                            District = null;
                        }
                        _districtId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _districtId;
    
        public virtual string Address
        {
            get;
            set;
        }
    
        public virtual string Postcode
        {
            get;
            set;
        }
    
        public virtual int SmallInfoSourceId
        {
            get { return _smallInfoSourceId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_smallInfoSourceId != value)
                    {
                        if (InfoSource != null && InfoSource.Id != value)
                        {
                            InfoSource = null;
                        }
                        _smallInfoSourceId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _smallInfoSourceId;
    
        public virtual string ConsultType
        {
            get;
            set;
        }
    
        public virtual string Remark
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ConsultantId1
        {
            get { return _consultantId1; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_consultantId1 != value)
                    {
                        if (Consultant1 != null && Consultant1.Id != value)
                        {
                            Consultant1 = null;
                        }
                        _consultantId1 = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _consultantId1;
    
        public virtual Nullable<int> ConsultantId2
        {
            get { return _consultantId2; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_consultantId2 != value)
                    {
                        if (Consultant2 != null && Consultant2.Id != value)
                        {
                            Consultant2 = null;
                        }
                        _consultantId2 = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _consultantId2;
    
        public virtual Nullable<int> NetConsultantId
        {
            get { return _netConsultantId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_netConsultantId != value)
                    {
                        if (NetConsultant != null && NetConsultant.Id != value)
                        {
                            NetConsultant = null;
                        }
                        _netConsultantId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _netConsultantId;
    
        public virtual Nullable<int> CreateTeacherId
        {
            get { return _createTeacherId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_createTeacherId != value)
                    {
                        if (CreateTeacher != null && CreateTeacher.Id != value)
                        {
                            CreateTeacher = null;
                        }
                        _createTeacherId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _createTeacherId;
    
        public virtual Nullable<System.DateTime> ConsultTime
        {
            get;
            set;
        }
    
        public virtual Nullable<int> SalesTeamId
        {
            get { return _salesTeamId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_salesTeamId != value)
                    {
                        if (SalesTeam != null && SalesTeam.Id != value)
                        {
                            SalesTeam = null;
                        }
                        _salesTeamId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _salesTeamId;
    
        public virtual Nullable<int> SalesmanId
        {
            get { return _salesmanId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_salesmanId != value)
                    {
                        if (Salesman != null && Salesman.Id != value)
                        {
                            Salesman = null;
                        }
                        _salesmanId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _salesmanId;
    
        public virtual bool IsImport
        {
            get;
            set;
        }
    
        public virtual int TeleSalesTimes
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> NextTeleSalesTime
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> AppointmentTime
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> DropInTime
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> DinWeiTime
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> SignUpTime
        {
            get;
            set;
        }
    
        public virtual bool IsDinWei
        {
            get;
            set;
        }
    
        public virtual bool IsClosed
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> LastSalesTime
        {
            get;
            set;
        }
    
        public virtual bool Important
        {
            get;
            set;
        }
    
        public virtual string ConsultantRemark
        {
            get;
            set;
        }
    
        public virtual string Keywords
        {
            get;
            set;
        }
    
        public virtual string Clazz
        {
            get;
            set;
        }
    
        public virtual bool IsLeaderFollow
        {
            get;
            set;
        }
    
        public virtual string Status
        {
            get;
            set;
        }
    
        public virtual string LastSaleLog
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsDorm
        {
            get;
            set;
        }
    
        public virtual Nullable<int> InClazzId
        {
            get { return _inClazzId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_inClazzId != value)
                    {
                        if (InClazz != null && InClazz.Id != value)
                        {
                            InClazz = null;
                        }
                        _inClazzId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _inClazzId;
    
        public virtual bool IsPay
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> PayTime
        {
            get;
            set;
        }
    
        public virtual bool IsRefund
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> RefundTime
        {
            get;
            set;
        }
    
        public virtual bool IsDropIn
        {
            get;
            set;
        }
    
        public virtual bool IsSignUp
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual District District
        {
            get { return _district; }
            set
            {
                if (!ReferenceEquals(_district, value))
                {
                    var previousValue = _district;
                    _district = value;
                    FixupDistrict(previousValue);
                }
            }
        }
        private District _district;
    
        public virtual SmallInfoSource InfoSource
        {
            get { return _infoSource; }
            set
            {
                if (!ReferenceEquals(_infoSource, value))
                {
                    var previousValue = _infoSource;
                    _infoSource = value;
                    FixupInfoSource(previousValue);
                }
            }
        }
        private SmallInfoSource _infoSource;
    
        public virtual School School
        {
            get { return _school; }
            set
            {
                if (!ReferenceEquals(_school, value))
                {
                    var previousValue = _school;
                    _school = value;
                    FixupSchool(previousValue);
                }
            }
        }
        private School _school;
    
        public virtual User Consultant1
        {
            get { return _consultant1; }
            set
            {
                if (!ReferenceEquals(_consultant1, value))
                {
                    var previousValue = _consultant1;
                    _consultant1 = value;
                    FixupConsultant1(previousValue);
                }
            }
        }
        private User _consultant1;
    
        public virtual User Consultant2
        {
            get { return _consultant2; }
            set
            {
                if (!ReferenceEquals(_consultant2, value))
                {
                    var previousValue = _consultant2;
                    _consultant2 = value;
                    FixupConsultant2(previousValue);
                }
            }
        }
        private User _consultant2;
    
        public virtual User CreateTeacher
        {
            get { return _createTeacher; }
            set
            {
                if (!ReferenceEquals(_createTeacher, value))
                {
                    var previousValue = _createTeacher;
                    _createTeacher = value;
                    FixupCreateTeacher(previousValue);
                }
            }
        }
        private User _createTeacher;
    
        public virtual User NetConsultant
        {
            get { return _netConsultant; }
            set
            {
                if (!ReferenceEquals(_netConsultant, value))
                {
                    var previousValue = _netConsultant;
                    _netConsultant = value;
                    FixupNetConsultant(previousValue);
                }
            }
        }
        private User _netConsultant;
    
        public virtual User Salesman
        {
            get { return _salesman; }
            set
            {
                if (!ReferenceEquals(_salesman, value))
                {
                    var previousValue = _salesman;
                    _salesman = value;
                    FixupSalesman(previousValue);
                }
            }
        }
        private User _salesman;
    
        public virtual SalesTeam SalesTeam
        {
            get { return _salesTeam; }
            set
            {
                if (!ReferenceEquals(_salesTeam, value))
                {
                    var previousValue = _salesTeam;
                    _salesTeam = value;
                    FixupSalesTeam(previousValue);
                }
            }
        }
        private SalesTeam _salesTeam;
    
        public virtual ICollection<ImportDupliate> ImportDupliates
        {
            get
            {
                if (_importDupliates == null)
                {
                    var newCollection = new FixupCollection<ImportDupliate>();
                    newCollection.CollectionChanged += FixupImportDupliates;
                    _importDupliates = newCollection;
                }
                return _importDupliates;
            }
            set
            {
                if (!ReferenceEquals(_importDupliates, value))
                {
                    var previousValue = _importDupliates as FixupCollection<ImportDupliate>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupImportDupliates;
                    }
                    _importDupliates = value;
                    var newValue = value as FixupCollection<ImportDupliate>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupImportDupliates;
                    }
                }
            }
        }
        private ICollection<ImportDupliate> _importDupliates;
    
        public virtual ICollection<TelSaleLog> TelSaleLogs
        {
            get
            {
                if (_telSaleLogs == null)
                {
                    var newCollection = new FixupCollection<TelSaleLog>();
                    newCollection.CollectionChanged += FixupTelSaleLogs;
                    _telSaleLogs = newCollection;
                }
                return _telSaleLogs;
            }
            set
            {
                if (!ReferenceEquals(_telSaleLogs, value))
                {
                    var previousValue = _telSaleLogs as FixupCollection<TelSaleLog>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTelSaleLogs;
                    }
                    _telSaleLogs = value;
                    var newValue = value as FixupCollection<TelSaleLog>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTelSaleLogs;
                    }
                }
            }
        }
        private ICollection<TelSaleLog> _telSaleLogs;
    
        public virtual Clazz InClazz
        {
            get { return _inClazz; }
            set
            {
                if (!ReferenceEquals(_inClazz, value))
                {
                    var previousValue = _inClazz;
                    _inClazz = value;
                    FixupInClazz(previousValue);
                }
            }
        }
        private Clazz _inClazz;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupDistrict(District previousValue)
        {
            if (previousValue != null && previousValue.Customers.Contains(this))
            {
                previousValue.Customers.Remove(this);
            }
    
            if (District != null)
            {
                if (!District.Customers.Contains(this))
                {
                    District.Customers.Add(this);
                }
                if (DistrictId != District.Id)
                {
                    DistrictId = District.Id;
                }
            }
            else if (!_settingFK)
            {
                DistrictId = null;
            }
        }
    
        private void FixupInfoSource(SmallInfoSource previousValue)
        {
            if (previousValue != null && previousValue.Customers.Contains(this))
            {
                previousValue.Customers.Remove(this);
            }
    
            if (InfoSource != null)
            {
                if (!InfoSource.Customers.Contains(this))
                {
                    InfoSource.Customers.Add(this);
                }
                if (SmallInfoSourceId != InfoSource.Id)
                {
                    SmallInfoSourceId = InfoSource.Id;
                }
            }
        }
    
        private void FixupSchool(School previousValue)
        {
            if (previousValue != null && previousValue.Customers.Contains(this))
            {
                previousValue.Customers.Remove(this);
            }
    
            if (School != null)
            {
                if (!School.Customers.Contains(this))
                {
                    School.Customers.Add(this);
                }
                if (SchoolId != School.Id)
                {
                    SchoolId = School.Id;
                }
            }
            else if (!_settingFK)
            {
                SchoolId = null;
            }
        }
    
        private void FixupConsultant1(User previousValue)
        {
            if (previousValue != null && previousValue.Marketing_Customer.Contains(this))
            {
                previousValue.Marketing_Customer.Remove(this);
            }
    
            if (Consultant1 != null)
            {
                if (!Consultant1.Marketing_Customer.Contains(this))
                {
                    Consultant1.Marketing_Customer.Add(this);
                }
                if (ConsultantId1 != Consultant1.Id)
                {
                    ConsultantId1 = Consultant1.Id;
                }
            }
            else if (!_settingFK)
            {
                ConsultantId1 = null;
            }
        }
    
        private void FixupConsultant2(User previousValue)
        {
            if (previousValue != null && previousValue.Marketing_Customer1.Contains(this))
            {
                previousValue.Marketing_Customer1.Remove(this);
            }
    
            if (Consultant2 != null)
            {
                if (!Consultant2.Marketing_Customer1.Contains(this))
                {
                    Consultant2.Marketing_Customer1.Add(this);
                }
                if (ConsultantId2 != Consultant2.Id)
                {
                    ConsultantId2 = Consultant2.Id;
                }
            }
            else if (!_settingFK)
            {
                ConsultantId2 = null;
            }
        }
    
        private void FixupCreateTeacher(User previousValue)
        {
            if (previousValue != null && previousValue.Marketing_Customer2.Contains(this))
            {
                previousValue.Marketing_Customer2.Remove(this);
            }
    
            if (CreateTeacher != null)
            {
                if (!CreateTeacher.Marketing_Customer2.Contains(this))
                {
                    CreateTeacher.Marketing_Customer2.Add(this);
                }
                if (CreateTeacherId != CreateTeacher.Id)
                {
                    CreateTeacherId = CreateTeacher.Id;
                }
            }
            else if (!_settingFK)
            {
                CreateTeacherId = null;
            }
        }
    
        private void FixupNetConsultant(User previousValue)
        {
            if (previousValue != null && previousValue.Marketing_Customer3.Contains(this))
            {
                previousValue.Marketing_Customer3.Remove(this);
            }
    
            if (NetConsultant != null)
            {
                if (!NetConsultant.Marketing_Customer3.Contains(this))
                {
                    NetConsultant.Marketing_Customer3.Add(this);
                }
                if (NetConsultantId != NetConsultant.Id)
                {
                    NetConsultantId = NetConsultant.Id;
                }
            }
            else if (!_settingFK)
            {
                NetConsultantId = null;
            }
        }
    
        private void FixupSalesman(User previousValue)
        {
            if (previousValue != null && previousValue.Marketing_Customer4.Contains(this))
            {
                previousValue.Marketing_Customer4.Remove(this);
            }
    
            if (Salesman != null)
            {
                if (!Salesman.Marketing_Customer4.Contains(this))
                {
                    Salesman.Marketing_Customer4.Add(this);
                }
                if (SalesmanId != Salesman.Id)
                {
                    SalesmanId = Salesman.Id;
                }
            }
            else if (!_settingFK)
            {
                SalesmanId = null;
            }
        }
    
        private void FixupSalesTeam(SalesTeam previousValue)
        {
            if (previousValue != null && previousValue.Customers.Contains(this))
            {
                previousValue.Customers.Remove(this);
            }
    
            if (SalesTeam != null)
            {
                if (!SalesTeam.Customers.Contains(this))
                {
                    SalesTeam.Customers.Add(this);
                }
                if (SalesTeamId != SalesTeam.Id)
                {
                    SalesTeamId = SalesTeam.Id;
                }
            }
            else if (!_settingFK)
            {
                SalesTeamId = null;
            }
        }
    
        private void FixupInClazz(Clazz previousValue)
        {
            if (previousValue != null && previousValue.Marketing_Customer_1.Contains(this))
            {
                previousValue.Marketing_Customer_1.Remove(this);
            }
    
            if (InClazz != null)
            {
                if (!InClazz.Marketing_Customer_1.Contains(this))
                {
                    InClazz.Marketing_Customer_1.Add(this);
                }
                if (InClazzId != InClazz.Id)
                {
                    InClazzId = InClazz.Id;
                }
            }
            else if (!_settingFK)
            {
                InClazzId = null;
            }
        }
    
        private void FixupImportDupliates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ImportDupliate item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ImportDupliate item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupTelSaleLogs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TelSaleLog item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TelSaleLog item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }

        #endregion

    }
}
