<#@ template language="C#" debug="false" hostspecific="true" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs" encoding="utf-8" #>
<#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this); 

string inputFile = @"..\Cn.Com.Sve.OA.DataServices\OaModel.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

// Write out support code to primary template output file
WriteHeader(fileManager);
BeginNamespace(namespaceName, code);
//WriteCustomObservableCollection();
EndNamespace(namespaceName);
EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();

// Emit Entity Types
// 循环处理实体模型中的所有实体
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
	string className = entity.Name + "Service";
	string interfaceName = "I" + entity.Name + "Service";
	string entityName = entity.Name;
	
	fileManager.StartNewFile(className + ".partial.cs");
    BeginNamespace(namespaceName, code);
	var pkTypeName = code.Escape(entity.KeyMembers[0].TypeUsage);
    bool entityHasNullableFKs = entity.NavigationProperties.Any(np => np.GetDependentProperties().Any(p=>ef.IsNullable(p)));
	string entitySetName = GetEntitySetName(entity.Name, container, code);
#>
public partial class <#=className#> : <#=interfaceName#> {
<#
	//region.Begin("RepositoryBase's Members");
#>
	public IUnitOfWork Db { get; private set; }
	protected SysContext SysContext{get; private set;}
	protected I<#=entityName#>Repository Repository { get; private set; }
	public <#=className#>(SysContext ctx) {
		this.SysContext = ctx;
		this.Db = DbContextFactory.Create();
		this.Repository = new <#=entityName#>Repository(this.Db);
	}
	public <#=className#>(SysContext ctx, IUnitOfWork db) {
		this.SysContext = ctx;
		if(db!=null){
			this.Db = db;
		}else{
			this.Db = DbContextFactory.Create();
		}
		this.Repository = new <#=entityName#>Repository(this.Db);
	}
	
	
	public void Add(<#=entity.Name#> entity) {
		this.Repository.Add(entity);
		this.Db.Save();		
	}

	public void Update(<#=entity.Name#> entity) {
		this.Repository.Update(entity);
		this.Db.Save();		
	}

	public void Save(<#=entity.Name#> entity){
		if(entity.Id==0){
			this.Add(entity);
		}else{
			this.Db.Save();	
		}
	}

	public void Delete(<#=entity.Name#> entity) {
		this.Repository.Delete(entity);
		this.Db.Save();
	}

	public void DeleteById(int id) {
		this.Repository.DeleteById(id);
		this.Db.Save();
	}

	public List<<#=entity.Name#>> FindAll() {
		return this.Repository.FindAll().ToList();
	}

	public <#=entity.Name#> FindById(int id) {
		return this.Repository.FindById(id);
	}
<#	
	//region.End();
	
	foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
		string propertyName = code.Escape(edmProperty);
		string paraName = code.CamelCase(edmProperty.Name);
		bool isForeignKey = entity.NavigationProperties.Any(np=>np.GetDependentProperties().Contains(edmProperty));
		if(!code.Escape(edmProperty).Equals("Id")){
#>
	public List<<#=entity.Name#>> FindBy<#=propertyName#>(<#=code.Escape(edmProperty.TypeUsage)#> <#=paraName#>){
		return this.Repository.FindBy<#=propertyName#>(<#=paraName#>).ToList();
	}
<#
		}
	}
#>
	public PagedModel<<#=entity.Name#>> FindByCriteria(<#=entity.Name#>Criteria c) {
		PagedModel<<#=entity.Name#>> m = new PagedModel<<#=entity.Name#>>();
		var r = this.Repository.FindByCriteria(c);
		if(!String.IsNullOrEmpty(c.sortname)){
<#
	foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
		string propertyName = code.Escape(edmProperty);
		bool isForeignKey = entity.NavigationProperties.Any(np=>np.GetDependentProperties().Contains(edmProperty));
#>
		if(c.sortname.ToLower().Equals("<#=propertyName.ToLower()#>")){
			if(c.sortorder.ToLower().Equals("asc")){
				r = r.OrderBy(o=>o.<#=propertyName#>);
			}else{
				r = r.OrderByDescending(o=>o.<#=propertyName#>);
			}
		}
<#		
	}
#>		
		}
		
		m.RecordCount = r.Count();
		if (c.pagesize.HasValue) {
			int page = c.page ?? 1;
			int pageCount = m.RecordCount / c.pagesize.Value;
			if (m.RecordCount % c.pagesize.Value > 0) {
				pageCount++;
			}
			int skip = (page - 1) * c.pagesize.Value;
			if (skip > 0) {
				r = r.Skip(skip);
			}
			r = r.Take(c.pagesize.Value);
		}
		
		m.Data = r.ToList();
		return m;
	}
}
<#
	EndNamespace(namespaceName);
}
	fileManager.Process();
#>

<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Cn.RaymanLee.Patterns;
using Cn.RaymanLee.Data;
using Cn.Com.Sve.OA.Entities;
using Cn.Com.Sve.OA.DataServices;
using Cn.Com.Sve.OA.Entities.Criteria;

<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    fileManager.EndBlock();
}
#>

<#+
// 写命名空间的开头 - 开始
void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#> {
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}
// 写命名空间的开头 - 结束
#>
<#+
void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}
#>

<#+
string GetEntitySetName(string entityName, EntityContainer container, CodeGenerationTools code){
	foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>()) {
		if(entitySet.ElementType.Name.Equals(entityName)){
			return code.Escape(entitySet.Name);
		}
	}
	return null;
}

#>
