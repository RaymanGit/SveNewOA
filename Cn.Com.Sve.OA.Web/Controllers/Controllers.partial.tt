<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs"  encoding="utf-8"#>
<#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\..\Cn.Com.Sve.OA.DataServices\OaModel.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

// Write out support code to primary template output file
WriteHeader(fileManager);
BeginNamespace(namespaceName, code);
//WriteCustomObservableCollection();
EndNamespace(namespaceName);
EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();

// Emit Entity Types
// 循环处理实体模型中的所有实体
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
	string className = entity.Name + "Controller";

    fileManager.StartNewFile(className + ".partial.cs");
    BeginNamespace(namespaceName, code);
	var pkTypeName = code.Escape(entity.KeyMembers[0].TypeUsage);
    bool entityHasNullableFKs = entity.NavigationProperties.Any(np => np.GetDependentProperties().Any(p=>ef.IsNullable(p)));
	string entitySetName = GetEntitySetName(entity.Name, container, code);
#>
public partial class <#=className#> : BaseController {
	partial void BeforeGetData(<#=entity.Name#>Criteria c);
	partial void AddRowToGridModel(LigerGridModel m, <#=entity.Name#> e);
	partial void AfterGetData(LigerGridModel gm, <#=entity.Name#>Criteria c, PagedModel<<#=entity.Name#>> pm);
	partial void AfterBuildGridModel(LigerGridModel gm, <#=entity.Name#>Criteria c, PagedModel<<#=entity.Name#>> pm);
	partial void BeforeShowAddView();
	partial void BeforeAddData(<#=entity.Name#> e, ref ActionResult ar);
	partial void AfterAddData(<#=entity.Name#> e, ref ActionResult ar);
	partial void BeforeShowEditView(<#=entity.Name#> e);
	partial void BeforeUpdateData(<#=entity.Name#> e, ref ActionResult ar);
	partial void AfterUpdateData(<#=entity.Name#> e, ref ActionResult ar);
	partial void BeforeDeleteData(int id, ref ActionResult ar);
	partial void AfterDeleteData(int id, ref ActionResult ar);

	public I<#=entity.Name#>Service Service { get; set; }
	public <#=entity.Name#>Controller() {
		this.Service = new <#=entity.Name#>Service(new SysContext{ CurrentUser = AppContext.CurrentUser });
	}
	public ActionResult Index() {
		return View();
	}
	

	public ActionResult GetData(<#=entity.Name#>Criteria c) {
		var m = new LigerGridModel();
		this.BeforeGetData(c);
		var r = this.Service.FindByCriteria(c);
		this.AfterGetData(m, c, r);
		m.Total = r.RecordCount;
		r.Data.ForEach(o => {
			this.AddRowToGridModel(m, o);
		});
		this.AfterBuildGridModel(m, c, r);
		return this.Json(m, JsonRequestBehavior.AllowGet);
	}
	[HttpGet]
	public ActionResult Add() {
		this.BeforeShowAddView();
		return this.View();
	}
	[HttpPost]
	public ActionResult Add(<#=entity.Name#> e) {
		ActionResult ar = null;
		try {
			this.BeforeAddData(e, ref ar);
			if (ar == null) {
				this.Service.Add(e);
				e = this.Service.FindById(e.Id);
				//ar = this.Json(new AjaxOperationResult { Data = e, Successful = true });
				this.AfterAddData(e, ref ar);
			}
		} catch (Exception ex) {
			ar = this.Json(new AjaxOperationResult { Successful = false, Message = ex.Message });
		}
		return ar;
	}
	[HttpGet]
	public ActionResult Edit(int id) {
		var e = this.Service.FindById(id);
			if (e != null) {
			this.BeforeShowEditView(e);
			return this.View(e);
		} else {
			return this.Content("找不到数据！");
		}
	}
	[HttpPost]
	public ActionResult Update(<#=entity.Name#> e) {
		ActionResult ar = null;
		try {
			this.BeforeUpdateData(e, ref ar);
			if (ar == null) {
				this.Service.Update(e);
				e = this.Service.FindById(e.Id);
				//ar = this.Json(new AjaxOperationResult { Data = e, Successful = true });
				this.AfterUpdateData(e, ref ar);
			}
		} catch (Exception ex) {
			ar = this.Json(new AjaxOperationResult { Successful = false, Message = ex.Message });
		}
		return ar;
	}
	[HttpPost]
	public ActionResult Delete(int id) {
		ActionResult ar = null;
		try {
			this.BeforeDeleteData(id, ref ar);
			if (ar == null) {
				this.Service.DeleteById(id);
				ar = this.Json(new AjaxOperationResult { Successful = true });
				this.AfterDeleteData(id, ref ar);
			}
		} catch (Exception ex) {
			ar = this.Json(new AjaxOperationResult { Successful = false, Message = ex.Message });
		}
		return ar;
	}

}
<#
	EndNamespace(namespaceName);
}
	fileManager.Process();
#>

<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Cn.Com.Sve.OA.BusinessService;
using Cn.Com.Sve.OA.Entities;
using Cn.Com.Sve.OA.Entities.Criteria;
using Cn.Com.Sve.OA.Web.Models;
using Cn.RaymanLee.Web.UI.ViewModels.LigerUI;
using Cn.RaymanLee.Data;

<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    fileManager.EndBlock();
}
#>

<#+
// 写命名空间的开头 - 开始
void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#> {
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}
// 写命名空间的开头 - 结束
#>
<#+
void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}
#>

<#+
string GetEntitySetName(string entityName, EntityContainer container, CodeGenerationTools code){
	foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>()) {
		if(entitySet.ElementType.Name.Equals(entityName)){
			return code.Escape(entitySet.Name);
		}
	}
	return null;
}

#>
